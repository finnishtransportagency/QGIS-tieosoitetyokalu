# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Osoitetyokalu
                                 A QGIS plugin
 Osoitetyokalu
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-19
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sitowise
        email                : support@sitowise.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from ctypes import pointer
from qgis.core import QgsMessageLog
import logging
formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logfilename=r'C:\Projects\PTP\PTP-1360\osoitetyokalu\logs\log.txt'
logging.basicConfig(filename=logfilename, level=logging.DEBUG, format=formatter)

from sympy import Point
from .dialogs.ShowCoordinates_dialog import ShowCoordinates_dialog
from .dialogs.PopUp_dialog import PopUp_dialog
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsMapToolEmitPoint
from qgis.gui import QgsMapTool, QgsMapCanvasAnnotationItem
from qgis.core import QgsField, QgsFeature, QgsVectorLayer, QgsProject, QgsCoordinateReferenceSystem, QgsGeometry, QgsPointXY
from qgis.core import  QgsAnnotationLayer, QgsAnnotationPointTextItem, QgsTextAnnotation, QgsTextDocument, QgsPoint
from qgis.gui import QgsMessageBar

from PyQt5.QtGui import QTextDocument
from PyQt5.QtCore import QSizeF,QPoint

from requests import get
import json

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Osoitetyokalu_dialog import OsoitetyokaluDialog
import os.path


class Osoitetyokalu:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Osoitetyokalu_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Osoitetyokalu')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.my_crs = QgsCoordinateReferenceSystem(3067)


        #Setting up canvas to click
        
        
        



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Osoitetyokalu', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Osoitetyokalu/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tieosoite'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.add_action(
            icon_path,
            text=self.tr(u'Popup-ikkuna'),
            callback=self.popup,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False)

        self.add_action(
            icon_path,
            text=self.tr(u'Tieosoite (Alku- ja loppupiste)'),
            callback=self.two_points,
            parent=self.iface.mainWindow(),
            add_to_toolbar=False)
#

   # def show_coordinates(self):
   #     canvas_clicked = PrintClickedPoint( self.iface.mapCanvas() )
#
   #     self.iface.mapCanvas().setMapTool( canvas_clicked )

        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Osoitetyokalu'),
                action)
            self.iface.removeToolBarIcon(action)


    def close_popup(self):
            dlg = PopUp_dialog
            dlg.close()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        dlg = ShowCoordinates_dialog()
        dlg.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.WindowMinimizeButtonHint)


        def display_point(pointTool):
            try:

                #click on canvas returns coordinates
                print(pointTool.x(), pointTool.y())
                point_x = str(pointTool.x())
                point_y = str(pointTool.y())
                dlg.CoordLineEdit.setText(f'{point_x}, {point_y}')

                #get new coordinates and address from VKM
                vkm_url='https://avoinapi.vaylapilvi.fi/viitekehysmuunnin/'
                road_address, vkm_error, point_x, point_y = self.vkm_request_road_address(vkm_url=vkm_url, point_x=point_x, point_y=point_y)
                        
                if vkm_error == True:
                    dlg.AddrLineEdit.setText(road_address)
                
                else:
                    dlg.AddrLineEdit.setText(road_address)
                    #draws a point with clicked coordinates
                    self.add_point(road_address=road_address, point_x=point_x, point_y=point_y)
                    
                    #adding an annotation with road address to the latest point
                    self.add_annotation(road_address=road_address, point_x=point_x, point_y=point_y)
                    
            except AttributeError:
                pass


        #self.iface.newProject()

        #CRS when the ShowCoordinates-tool is opened
        QgsProject.instance().setCrs(self.my_crs)

        canvas = self.iface.mapCanvas()
        pointTool = QgsMapToolEmitPoint(canvas)
        pointTool.canvasClicked.connect(display_point)
        canvas.setMapTool(pointTool)
        display_point(pointTool)

        # show the dialog
        dlg.show()
        # Run the dialog event loop
        result = dlg.exec_()
        # See if OK was pressed
        if result:
            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    def popup(self):
        if self.first_start == True:
            self.first_start = False
        dlg = PopUp_dialog()
        dlg.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.WindowMinimizeButtonHint)


        def display_popup(pointTool):
            try:
                QgsProject.instance().setCrs(self.my_crs)
                #canvas = self.iface.mapCanvas()

                point_x = str(pointTool.x())
                point_y = str(pointTool.y())
                #get new coordinates and address from VKM
                vkm_url = 'https://avoinapi.vaylapilvi.fi/viitekehysmuunnin/'
                response = get(vkm_url + f'muunna?x={point_x}&y={point_y}&palautusarvot=1,2,3,4,5,6&vaylan_luonne=0')

                while response.status_code !=200: #retry
                    logging.info('retrying')
                    response = get(vkm_url + f'muunna?x={point_x}&y={point_y}&palautusarvot=1,2,3,4,5,6&vaylan_luonne=0')

                vkm_error = False
                vkm_data = json.loads(response.content)
                for vkm_feature in vkm_data['features']:
                    print(vkm_feature)
                    if 'virheet' in vkm_feature['properties']:
                        road_address = vkm_feature['properties']['virheet']
                        vkm_error = True
                        
                    else:
                        try:
                            #getting road coordinates and road address that are nearest to the mouse click
                            #print(vkm_feature['properties']) 
                            point_x = vkm_feature['properties']['x']
                            point_y = vkm_feature['properties']['y']
                            tie = str(vkm_feature['properties']['tie'])
                            ajorata = str(vkm_feature['properties']['ajorata'])
                            osa = str(vkm_feature['properties']['osa'])
                            etaisyys = str(vkm_feature['properties']['etaisyys'])
                            hallinnollinen_luokka = str(vkm_feature['properties']['hallinnollinen_luokka'])
                            kuntanimi = str(vkm_feature['properties']['kuntanimi'])
                            katunimi = str(vkm_feature['properties']['katunimi'])
                            katunumero = str(vkm_feature['properties']['katunumero'])
                            elynimi = str(vkm_feature['properties']['elynimi'])
                            ualuenimi = str(vkm_feature['properties']['ualuenimi'])
                            maakuntanimi = str(vkm_feature['properties']['maakuntanimi'])
                            #maantien_nimi = str(vkm_feature['properties']['maantien_nimi'])

                            dlg.XlineEdit.setText(str(point_x))
                            dlg.YlineEdit.setText(str(point_y))
                            dlg.TielineEdit.setText(tie)
                            dlg.AjoratalineEdit.setText(ajorata)
                            dlg.OsalineEdit.setText(osa)
                            dlg.EtaisyyslineEdit.setText(etaisyys)
                            dlg.HaLulineEdit.setText(hallinnollinen_luokka)
                            dlg.KuntanimilineEdit.setText(kuntanimi)
                            dlg.KatunimilineEdit.setText(katunimi)
                            dlg.KatunumerolineEdit.setText(katunumero)
                            dlg.ElynimilineEdit.setText(elynimi)
                            dlg.UaluenimilineEdit.setText(ualuenimi)
                            dlg.MaakuntanimilineEdit.setText(maakuntanimi)

                            road_address = f'{tie}/{ajorata}/{osa}/{etaisyys}'
                            
                        except:
                            point_x = vkm_feature['properties']['x']
                            point_y = vkm_feature['properties']['y']
                            tie = str(vkm_feature['properties']['tie'])
                            ajorata = str(vkm_feature['properties']['ajorata'])
                            osa = str(vkm_feature['properties']['osa'])
                            etaisyys = str(vkm_feature['properties']['etaisyys'])
                            hallinnollinen_luokka = str(vkm_feature['properties']['hallinnollinen_luokka'])
                            kuntanimi = str(vkm_feature['properties']['kuntanimi'])
                            #katunimi = str(vkm_feature['properties']['katunimi'])
                            #katunumero = str(vkm_feature['properties']['katunumero'])
                            elynimi = str(vkm_feature['properties']['elynimi'])
                            ualuenimi = str(vkm_feature['properties']['ualuenimi'])
                            maakuntanimi = str(vkm_feature['properties']['maakuntanimi'])
                            #maantien_nimi = str(vkm_feature['properties']['maantien_nimi'])

                            dlg.XlineEdit.setText(str(point_x))
                            dlg.YlineEdit.setText(str(point_y))
                            dlg.TielineEdit.setText(tie)
                            dlg.AjoratalineEdit.setText(ajorata)
                            dlg.OsalineEdit.setText(osa)
                            dlg.EtaisyyslineEdit.setText(etaisyys)
                            dlg.HaLulineEdit.setText(hallinnollinen_luokka)
                            dlg.KuntanimilineEdit.setText(kuntanimi)
                            #dlg.KatunimilineEdit.setText(katunimi)
                            #dlg.KatunumerolineEdit.setText(katunumero)
                            dlg.ElynimilineEdit.setText(elynimi)
                            dlg.UaluenimilineEdit.setText(ualuenimi)
                            dlg.MaakuntanimilineEdit.setText(maakuntanimi)
                            
                            road_address = f'{tie}/{ajorata}/{osa}/{etaisyys}'

                    if vkm_error == True:
                        self.error_popup(road_address=road_address)

                    else:
                        self.add_point(road_address=road_address, point_x=point_x, point_y=point_y)
                        

            except AttributeError:
                pass

        
        canvas = self.iface.mapCanvas()
        pointTool = QgsMapToolEmitPoint(canvas)
        pointTool.canvasClicked.connect(display_popup)
        canvas.setMapTool(pointTool)
        display_popup(pointTool)
        dlg.show()
        dlg.exec_()
        dlg.SuljeButton.clicked.connect(self.close_popup)
        
        
        

    def two_points(self):

        if self.first_start == True:
            self.first_start = False
        self.two_points_dlg = ShowCoordinates_dialog()
        self.two_points_dlg.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.WindowMinimizeButtonHint)


        def display_point_A(pointTool_A):
            try:

                #click on canvas returns coordinates
                print('Point A')
                print(pointTool_A.x(), pointTool_A.y())
                point_x = str(pointTool_A.x())
                point_y = str(pointTool_A.y())
                self.two_points_dlg.CoordLineEdit.setText(f'{point_x}, {point_y}')

                #get new coordinates and address from VKM
                vkm_url='https://avoinapi.vaylapilvi.fi/viitekehysmuunnin/'
                road_address, vkm_error, point_x, point_y = self.vkm_request_road_address(vkm_url=vkm_url, point_x=point_x, point_y=point_y, display_point='A')
                        
                if vkm_error == True:
                    self.error_popup(road_address=road_address)
                
                else:
                    #dlg.AddrLineEdit.setText(road_address)
                    self.add_point(road_address=road_address, point_x=point_x, point_y=point_y)
                    
                    #adding an annotation with road address to the latest point
                    self.add_annotation(road_address=road_address, point_x=point_x, point_y=point_y)

                    #connecting canvas to pointTool B
                    canvas.setMapTool(pointTool_B)
                    
                    print('Returning point A coordinates')
                    #getting road number to confirm it matches with point B road number
                    road_address_split = road_address.split('/')
                    road_address_split = road_address_split[0].split(' ')
                    tie_A = road_address_split[1]
                    print(f'Tie A {tie_A}')
                    

                    return point_x, point_y, tie_A
                            
            except AttributeError:
                pass


        def display_point_B(pointTool_B, point_x_A, point_y_A, tie_A):

            try:

                #click on canvas returns coordinates
                print('Point B')
                print(pointTool_B.x(), pointTool_B.y())
                point_x = str(pointTool_B.x())
                point_y = str(pointTool_B.y())
                self.two_points_dlg.CoordLineEdit.setText(f'{point_x}, {point_y}')

                #get new coordinates and address from VKM
                vkm_url='https://avoinapi.vaylapilvi.fi/viitekehysmuunnin/'
                road_address, vkm_error, point_x_B, point_y_B = self.vkm_request_road_address(vkm_url=vkm_url, point_x=point_x, point_y=point_y, display_point='B', palautus_arvot='1,2,5')
                        
                if vkm_error == True:
                    self.error_popup(road_address=road_address)
                
                else:
                    #dlg.AddrLineEdit.setText(road_address)
                    self.add_point(road_address=road_address, point_x=point_x_B, point_y=point_y_B)
                    
                    #adding an annotation with road address to the latest point
                    self.add_annotation(road_address=road_address, point_x=point_x_B, point_y=point_y_B)

                    #getting road address and calculating the distance between points A and B
                    
                    error_message, polyline_coordinates, pituus = self.vkm_request_geometry(vkm_url=vkm_url, point_x_A=point_x_A, point_y_A=point_y_A, point_x_B=point_x_B, point_y_B=point_y_B, tie_A=tie_A)

                    print(f'polyline_coordinates {polyline_coordinates}')
                    print(f'pituus {pituus}')

                    if error_message != None:
                        self.error_popup(road_address=error_message)
                        return
                    #connecting canvas to pointTool A
                    canvas.setMapTool(pointTool_A)
                            
            except AttributeError:
                    pass


        self.my_crs = QgsCoordinateReferenceSystem(3067)
        QgsProject.instance().setCrs(self.my_crs)
        canvas = self.iface.mapCanvas()
        
        pointTool_A = QgsMapToolEmitPoint(canvas)
        pointTool_A.canvasClicked.connect(display_point_A)
        canvas.setMapTool(pointTool_A)

        pointTool_B = QgsMapToolEmitPoint(canvas)
        pointTool_B.canvasClicked.connect(display_point_B)
        
        try:
            point_x_A, point_y_A, tie_A = display_point_A(pointTool_A)
            print(f'point_y_A = {point_y_A} \n tie_A = {tie_A}')
            display_point_B(pointTool_B, point_x_A, point_y_A, tie_A)
        except:
            display_point_A(pointTool_A)

        #self.display_point_B(pointTool)

        self.two_points_dlg.show()
        # Run the dialog event loop
        result = self.two_points_dlg.exec_()
        # See if OK was pressed
        if result:
            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


# ---------------- EXTRA FUNCTIONS ---------------------- 

    def vkm_request_road_address(self, vkm_url, point_x, point_y, display_point='', palautus_arvot='1,2'):
        response = get(vkm_url + f'muunna?x={point_x}&y={point_y}&palautusarvot={palautus_arvot}&vaylan_luonne=0')

        while response.status_code !=200: #retry
            logging.info('retrying')
            response = get(vkm_url + f'muunna?x={point_x}&y={point_y}&palautusarvot={palautus_arvot}&vaylan_luonne=0')

        vkm_error = False
        vkm_data = json.loads(response.content)
        for vkm_feature in vkm_data['features']:

            if 'virheet' in vkm_feature['properties']:
                road_address = display_point + vkm_feature['properties']['virheet']
                vkm_error = True
            
            else:
                try:
                    #getting road coordinates and road address that are nearest to the mouse click
                    print(vkm_feature['properties']) 
                    point_x = vkm_feature['properties']['x']
                    point_y = vkm_feature['properties']['y']
                    tie = str(vkm_feature['properties']['tie'])
                    ajorata = str(vkm_feature['properties']['ajorata'])
                    osa = str(vkm_feature['properties']['osa'])
                    etaisyys = str(vkm_feature['properties']['etaisyys'])
                    
                    road_address = f'{display_point} {tie}/{ajorata}/{osa}/{etaisyys}'

                    
                except:
                    #nearest address is a street -> no road address
                    print(vkm_feature['properties'])
                    point_x = vkm_feature['properties']['x']
                    point_y = vkm_feature['properties']['y']

                    road_address = f'Ei tieosoitetta'
        print(road_address)

        return road_address, vkm_error, point_x, point_y

    
    def add_point(self, road_address, point_x, point_y):
        point_layer = QgsVectorLayer('Point', f'Piste ({road_address})', 'memory')
        pr = point_layer.dataProvider()
        pr.addAttributes([QgsField("ID", QVariant.String)])
        point_layer.updateFields()
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(point_x, point_y)))
        feature.setAttributes(['1'])
        
        #each point is added as a separate layer
        pr.addFeature(feature)
        point_layer.updateExtents()
        point_layer.setCrs(self.my_crs)
        QgsProject.instance().addMapLayer(point_layer)


    def add_annotation(self, road_address, point_x, point_y):
        layer = self.iface.activeLayer()

        annot = QgsTextAnnotation()
        annot_length = len(road_address) * 6

        annot.setFrameSize(QSizeF(annot_length, 18))
        annot.setMapLayer(layer)
        annot.setFrameOffsetFromReferencePoint(QPoint(30, 30))
        annot.setDocument(QTextDocument(road_address))

        # X and Y are defined previously
        annot.setMapPositionCrs(QgsCoordinateReferenceSystem(layer.crs()))
        annot.setMapPosition(QgsPointXY(point_x, point_y))

        QgsProject.instance().annotationManager().addAnnotation(annot)


    def close_popup(self):
        dlg = PopUp_dialog
        dlg.close()

    
    def error_popup(self, road_address):
            self.iface.messageBar().pushMessage(
            f'{road_address}',
            level=1, duration=10)

    
    def vkm_request_geometry(self, vkm_url, point_x_A, point_y_A, point_x_B, point_y_B, tie_A, display_point='', palautus_arvot='1,2,5'):
        response = get(vkm_url + f'muunna?x={point_x_A}&y={point_y_A}&x_loppu={point_x_B}&y_loppu={point_y_B}&tie={tie_A}&palautusarvot={palautus_arvot}&vaylan_luonne=0')

        while response.status_code !=200: #retry
            logging.info('retrying')
            response = get(vkm_url + f'muunna?x={point_x_A}&y={point_y_A}&x_loppu={point_x_B}&y_loppu={point_y_B}&tie={tie_A}&palautusarvot={palautus_arvot}&vaylan_luonne=0')

        vkm_data = json.loads(response.content)
        polyline_coordinates = []
        error_message = None

        for vkm_feature in vkm_data['features']:

            if 'virheet' in vkm_feature['properties']:
                error_message = display_point + vkm_feature['properties']['virheet']
            
            elif vkm_feature['geometry']['type'] == 'LineString':
                for point in vkm_feature['geometry']['coordinates'][0]:
                    polyline_coordinates.append(point)
                pituus = str(vkm_feature['properties']['mitattu_pituus'])
                
        return error_message, polyline_coordinates, pituus

                